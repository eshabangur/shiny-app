library(shiny)
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
library(shiny)
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("Old Faithful Geyser Data"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
sliderInput("bins",
"Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$distPlot <- renderPlot({
# generate bins based on input$bins from ui.R
x    <- faithful[, 2]
bins <- seq(min(x), max(x), length.out = input$bins + 1)
# draw the histogram with the specified number of bins
hist(x, breaks = bins, col = 'darkgray', border = 'white',
xlab = 'Waiting time to next eruption (in mins)',
main = 'Histogram of waiting times')
})
}
# Run the application
shinyApp(ui = ui, server = server)
library(tidyverse)
tuition <- read_delim("schools.csv")
setwd("/Users/eshabangur/Desktop/info/group-project")
tuition <- read_delim("schools.csv")
tuition
tuition %>%
filter(length == "4 year" | length == "2 year") %>%
group_by(length,state) %>%
summarise(ave_data=mean(value)) %>%
ggplot(aes(state,ave_data,fill=as.factor(length)))+
geom_col(position="dodge")+
labs(title="fill",
x="length",
y="tuition cost")+
scale_fill_discrete(name="length")
library(tidyverse)
setwd("/Users/eshabangur/Desktop/info/shiny-app/ps6")
tuition <- read_delim("schools.csv")
nrow(tuition)
ncol(tuition)
ui <- fluidPage(
tabsetPanel(
tabPanel("About","about"),
tabPanel("Graphs","graph"),
tabPanel("Tables","table")
),
# Application title
titlePanel("Old Faithful Geyser Data"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
sliderInput("bins",
"Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$distPlot <- renderPlot({
# generate bins based on input$bins from ui.R
x    <- faithful[, 2]
bins <- seq(min(x), max(x), length.out = input$bins + 1)
# draw the histogram with the specified number of bins
hist(x, breaks = bins, col = 'darkgray', border = 'white',
xlab = 'Waiting time to next eruption (in mins)',
main = 'Histogram of waiting times')
})
}
# Run the application
shinyApp(ui = ui, server = server)
runApp()
rows<-nrow(tuition)
rows
cols<-ncol(tuition)
cols
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
tuition %>%
filter(Length == "4 year" | Length == "2 year") %>%
group_by(Length,State) %>%
summarise(ave_data=mean(Value)) %>%
ggplot(aes(State,ave_data,fill=as.factor(Length)))+
geom_col(position="dodge")+
labs(title="fill",
x="length",
y="tuition cost")+
scale_fill_discrete(name="length")
library(ggplot2)
tuition %>%
filter(Length == "4 year" | Length == "2 year") %>%
group_by(Length,State) %>%
summarise(ave_data=mean(Value)) %>%
ggplot(aes(State,ave_data,fill=as.factor(Length)))+
geom_col(position="dodge")+
labs(title="fill",
x="length",
y="tuition cost")+
scale_fill_discrete(name="length")
tuition <- read_delim("schools.csv")
tuition
tuition %>%
filter(Length == "4 year" | Length == "2 year") %>%
group_by(Length,State) %>%
summarise(ave_data=mean(Value)) %>%
ggplot(aes(State,ave_data,fill=as.factor(Length)))+
geom_col(position="dodge")+
labs(title="fill",
x="length",
y="tuition cost")+
scale_fill_discrete(name="length")
tuition %>%
filter(Length == "4 year" | Length == "2 year") %>%
group_by(State) %>%
summarise(ave_data=mean(Value)) %>%
ggplot(aes(State,ave_data,fill=as.factor(Length)))+
geom_col(position="dodge")+
labs(title="fill",
x="length",
y="tuition cost")+
scale_fill_discrete(name="length")
tuition %>%
filter(Length == "4 year" | Length == "2 year") %>%
group_by(Length,State) %>%
summarise(ave_data=mean(Value.groups)) %>%
ggplot(aes(State,ave_data,fill=as.factor(Length)))+
geom_col(position="dodge")+
labs(title="fill",
x="length",
y="tuition cost")+
scale_fill_discrete(name="length")
tuition %>%
filter(Length == "4 year" | Length == "2 year") %>%
group_by(Length,State) %>%
summarise(ave_data=mean(Value)) %>%
ggplot(aes(State,ave_data,fill=as.factor(Length)))+
geom_col(position="dodge")+
labs(title="fill",
x="length",
y="tuition cost")+
scale_fill_discrete(name="length")
tuition %>%
group_by(State) %>%
summarise(ave_data=mean(Value)) %>%
ggplot(aes(State,ave_data,fill=as.factor(State)))+
geom_col(position="dodge")+
labs(title="fill",
x="length",
y="tuition cost")+
scale_fill_discrete(name="length")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
